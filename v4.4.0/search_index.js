var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = LanguageServer","category":"page"},{"location":"#LanguageServer","page":"Home","title":"LanguageServer","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Dev) (Image: Project Status: Active - The project has reached a stable, usable state and is being actively developed.) (Image: ) (Image: codecov)","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package implements the Microsoft Language Server Protocol for the Julia programming language.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Text editors with a client for the Language Server Protocol are able to make use of the Julia Language Server for various code editing features:","category":"page"},{"location":"","page":"Home","title":"Home","text":"VS Code\nAtom\nVim and Neovim\nEmacs\nSublime Text","category":"page"},{"location":"#Installation-and-Usage","page":"Home","title":"Installation and Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation: (Image: Dev)","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"LanguageServer\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Instantiate an instance of the language server with LanguageServerInstance and run it:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LanguageServer\n\nserver = LanguageServerInstance(stdin, stdout, \"/path/to/environment\")\nrun(server)","category":"page"},{"location":"syntax/#Syntax-Reference","page":"Syntax Reference","title":"Syntax Reference","text":"","category":"section"},{"location":"syntax/","page":"Syntax Reference","title":"Syntax Reference","text":"Modules = [LanguageServer]\nPages   = [\"syntax.md\"]","category":"page"},{"location":"syntax/#Main","page":"Syntax Reference","title":"Main","text":"","category":"section"},{"location":"syntax/","page":"Syntax Reference","title":"Syntax Reference","text":"Modules = [LanguageServer]\nPages   = readdir(\"../src\")","category":"page"},{"location":"syntax/#LanguageServer.Range-Tuple{LanguageServer.TextDocument, UnitRange}","page":"Syntax Reference","title":"LanguageServer.Range","text":"Range(Doc, rng)\n\nConverts a byte offset range to a LSP Range.\n\n\n\n\n\n","category":"method"},{"location":"syntax/#LanguageServer.get_line_offsets-Tuple{LanguageServer.TextDocument}","page":"Syntax Reference","title":"LanguageServer.get_line_offsets","text":"get_line_offsets(doc::Document)\n\nUpdates the doc.lineoffsets field, an n length Array each entry of which gives the byte offset position of the start of each line. This always starts with 0 for the first line (even if empty).\n\n\n\n\n\n","category":"method"},{"location":"syntax/#LanguageServer.get_offset-Tuple{LanguageServer.TextDocument, Integer, Integer}","page":"Syntax Reference","title":"LanguageServer.get_offset","text":"get_offset(doc, line, char)\n\nReturns the 0 based byte offset position corresponding to a line/character position. This takes 0 based line/char inputs. Corresponding functions are available for Position and Range arguments, the latter returning a UnitRange{Int}.\n\n\n\n\n\n","category":"method"},{"location":"syntax/#LanguageServer.get_position_from_offset-Tuple{LanguageServer.TextDocument, Integer}","page":"Syntax Reference","title":"LanguageServer.get_position_from_offset","text":"get_position_from_offset(doc, offset)\n\nReturns the 0-based line and character position within a document of a given byte offset.\n\n\n\n\n\n","category":"method"},{"location":"syntax/#LanguageServer.index_at","page":"Syntax Reference","title":"LanguageServer.index_at","text":"index_at(doc::TextDocument, p::Position, forgiving_mode=false)\n\nConverts a 0-based Position that is UTF-16 encoded to a 1-based UTF-8 encoded Julia string index.\n\n\n\n\n\n","category":"function"},{"location":"syntax/#LanguageServer.is_diag_dependent_on_env-Tuple{LanguageServer.Diagnostic}","page":"Syntax Reference","title":"LanguageServer.is_diag_dependent_on_env","text":"isdiagdependentonenv(diag::Diagnostic)::Bool\n\nIs this diagnostic reliant on the current environment being accurately represented?\n\n\n\n\n\n","category":"method"},{"location":"syntax/#LanguageServer.LanguageServerInstance","page":"Syntax Reference","title":"LanguageServer.LanguageServerInstance","text":"LanguageServerInstance(pipe_in, pipe_out, env=\"\", depot=\"\", err_handler=nothing, symserver_store_path=nothing)\n\nConstruct an instance of the language server.\n\nOnce the instance is run, it will read JSON-RPC from pipe_out and write JSON-RPC from pipe_in according to the language server specification. For normal usage, the language server can be instantiated with LanguageServerInstance(stdin, stdout, false, \"/path/to/environment\").\n\nArguments\n\npipe_in::IO: Pipe to read JSON-RPC from.\npipe_out::IO: Pipe to write JSON-RPC to.\nenv::String: Path to the environment for which the language server is running. An empty string uses julia's default environment.\ndepot::String: Sets the JULIA_DEPOT_PATH where the language server looks for packages required in env.\nerr_handler::Union{Nothing,Function}: If not nothing, catch all errors and pass them to an error handler function with signature err_handler(err, bt). Mostly used for the VS Code crash reporting implementation.\nsymserver_store_path::Union{Nothing,String}: if nothing is passed, the symbol server cash is stored in a folder in the package. If an absolute path is passed, the symbol server will store the cache files in that path. The path must exist on disc before this is called.\n\n\n\n\n\n","category":"type"},{"location":"syntax/#Base.run-Tuple{LanguageServerInstance}","page":"Syntax Reference","title":"Base.run","text":"run(server::LanguageServerInstance)\n\nRun the language server.\n\n\n\n\n\n","category":"method"},{"location":"syntax/#LanguageServer.runserver","page":"Syntax Reference","title":"LanguageServer.runserver","text":"runserver(pipe_in=stdin, pipe_out=stdout[, env_path])\n\nRun a LanguageServerInstance reading from pipe_in and writing to pipe_out.\n\nThe same options can be passed to runserver as to LanguageServerInstance. If env_path is not specified, attempt to pick an environment by considering in order of priority:\n\nARGS[1]: the first command-line argument passed to the invocation of julia.\nThe Julia project containing pwd().\nThe default Julia environment withing .julia/environments/v#.#.\n\nExamples\n\nThe following invocation of Julia would set env_path to /home/example/repos/Example.jl:\n\njulia --project=/path/to/LanguageServer.jl \\\n  -e \"using LanguageServer; runserver()\" \\\n  /home/example/repos/Example.jl\n\nIf there was a Project.toml or JuliaProject.toml in /home/example/repos/Example.jl/, the following invocation would set env_path to /home/example/repos/Example.jl/; otherwise it would be set to .julia/environments/v#.# where v#.# is the major/minor version of Julia being invoked.\n\njulia --project=/path/to/LanguageServer.jl \\\n  -e \"using LanguageServer; runserver()\"\n\n\n\n\n\n","category":"function"},{"location":"syntax/#Requests","page":"Syntax Reference","title":"Requests","text":"","category":"section"},{"location":"syntax/","page":"Syntax Reference","title":"Syntax Reference","text":"Modules = [LanguageServer]\nPages   = readdir(\"../src/requests\")","category":"page"},{"location":"syntax/#LanguageServer.is_completion_match","page":"Syntax Reference","title":"LanguageServer.is_completion_match","text":"is_completion_match(s::AbstractString, prefix::AbstractString, cutoff=3)\n\nReturns true if s starts with prefix or has a sufficiently high fuzzy score.\n\n\n\n\n\n","category":"function"},{"location":"syntax/#Protocol","page":"Syntax Reference","title":"Protocol","text":"","category":"section"},{"location":"syntax/","page":"Syntax Reference","title":"Syntax Reference","text":"Modules = [LanguageServer]\nPages   = readdir(\"../src/protocol\")","category":"page"}]
}
